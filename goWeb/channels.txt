channels
goroutine运行在相同的地址空间，因此访问共享内存必须做好同步。那么goroutine之间如何进行数据的通
信呢，Go提供了一个很好的通信机制channel。channel可以与Unix shell 中的双向管道做类比：可以通过
它发送或者接收值。这些值只能是特定的类型：channel类型。定义一个channel时，也需要定义发送到
channel的值的类型。注意，必须使用make 创建channel：

ci := make(chan int)
cs := make(chan string)
cf := make(chan interface{})
channel通过操作符 <- 来接收和发送数据
ch <- v // 发送v到channel ch.
v := <-ch // 从ch中接收数据，并赋值给v
我们把这些应用到我们的例子中来：
package main
import "fmt"
func sum(a []int, c chan int) {
total := 0
for _, v := range a {
total += v
} c
<- total // send total to c
} f
unc main() {
a := []int{7, 2, 8, -9, 4, 0}
c := make(chan int)
go sum(a[:len(a)/2], c)
go sum(a[len(a)/2:], c)
x, y := <-c, <-c // receive from c
fmt.Println(x, y, x + y)
}
默认情况下，channel接收和发送数据都是阻塞的，除非另一端已经准备好，这样就使得Goroutines同步变
的更加的简单，而不需要显式的lock。所谓阻塞，也就是如果读取（value := <-ch） 它将会被阻塞，直到有
数据接收。其次，任何发送（ch<-5） 将会被阻塞，直到数据被读出。无缓冲channel是在多个goroutine之
间同步很棒的工具。
Buffered Channels
上面我们介绍了默认的非缓存类型的channel，不过Go也允许指定channel的缓冲大小，很简单，就是
channel可以存储多少元素。ch:= make(chan bool, 4)，创建了可以存储4个元素的bool 型channel。在这个
channel 中，前4个元素可以无阻塞的写入。当写入第5个元素时，代码将会阻塞，直到其他goroutine从
channel 中读取一些元素，腾出空间。

ch := make(chan type, value)
当 value = 0 时，channel 是无缓冲阻塞读写的，当value > 0 时，channel 有缓冲、是非阻塞的，直到写满
value 个元素才阻塞写入。
我们看一下下面这个例子，你可以在自己本机测试一下，修改相应的value值
package main
import "fmt"
func main() {
c := make(chan int, 2)//修改2为1就报错，修改2为3可以正常运行
c <- 1
c <- 2
fmt.Println(<-c)
fmt.Println(<-c)
}
//修改为1报如下的错误:
//fatal error: all goroutines are asleep - deadlock!
Range和Close
上面这个例子中，我们需要读取两次c，这样不是很方便，Go考虑到了这一点，所以也可以通过range，像
操作slice或者map一样操作缓存类型的channel，请看下面的例子

package main
import (
"fmt"
) f
unc fibonacci(n int, c chan int) {
x, y := 1, 1
for i := 0; i < n; i++ {
c <- x
x, y = y, x + y
} c
lose(c)
} f
unc main() {
c := make(chan int, 10)
go fibonacci(cap(c), c)
for i := range c {
fmt.Println(i)
}
}
for i := range c 能够不断的读取channel里面的数据，直到该channel被显式的关闭。上面代码我们看
到可以显式的关闭channel，生产者通过内置函数 close 关闭channel。关闭channel之后就无法再发送任
何数据了，在消费方可以通过语法 v, ok := <-ch 测试channel是否被关闭。如果ok返回false，那么说明
channel已经没有任何数据并且已经被关闭。
记住应该在生产者的地方关闭channel，而不是消费的地方去关闭它，这样容易引起panic
另外记住一点的就是channel不像文件之类的，不需要经常去关闭，只有当你确实没有任何发送数据
了，或者你想显式的结束range循环之类的
Select
我们上面介绍的都是只有一个channel的情况，那么如果存在多个channel的时候，我们该如何操作呢，Go
里面提供了一个关键字 select ，通过 select 可以监听channel上的数据流动。
select 默认是阻塞的，只有当监听的channel中有发送或接收可以进行时才会运行，当多个channel都准
备好的时候，select是随机的选择一个执行的。

package main
import "fmt"
func fibonacci(c, quit chan int) {
x, y := 1, 1
for {
select {
case c <- x:
x, y = y, x + y
case <-quit:
fmt.Println("quit")
return
}
}
} f
unc main() {
c := make(chan int)
quit := make(chan int)
go func() {
for i := 0; i < 10; i++ {
fmt.Println(<-c)
} q
uit <- 0
}()
fibonacci(c, quit)
}
在 select 里面还有default语法， select 其实就是类似switch的功能，default就是当监听的channel都没
有准备好的时候，默认执行的（select不再阻塞等待channel） 。
select {
case i := <-c:
// use i
default:
// 当c阻塞的时候执行这里
} 超
时
有时候会出现goroutine阻塞的情况，那么我们如何避免整个程序进入阻塞的情况呢？我们可以利用select来
设置超时，通过如下的方式实现：

func main() {
c := make(chan int)
o := make(chan bool)
go func() {
for {
select {
case v := <- c:
println(v)
case <- time.After(5 * time.Second):
println("timeout")
o <- true
break
}
}
}()
<- o
}
runtime goroutine
runtime包中有几个处理goroutine的函数：
Goexit
退出当前执行的goroutine，但是defer函数还会继续调用
Gosched
让出当前goroutine的执行权限，调度器安排其他等待的任务运行，并在下次某个时候从该位置恢复执
行。
NumCPU
返回 CPU 核数量
NumGoroutine
返回正在执行和排队的任务总数
GOMAXPROCS
用来设置可以并行计算的CPU核数的最大值，并返回之前的值。